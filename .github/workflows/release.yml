name: üöÄ Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # Create Release
  create-release:
    name: üì¶ Create Release
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üè∑Ô∏è Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: üìù Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
        fi

    - name: üì¶ Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Cyber Container Platform v${{ steps.version.outputs.VERSION }}
        body: |
          ## üöÄ Cyber Container Platform v${{ steps.version.outputs.VERSION }}
          
          ### üìã Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### üì¶ Installation
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd cyber-container-platform
          ./deploy.sh
          ```
          
          ### üîó Links
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [API Reference](https://github.com/${{ github.repository }}/blob/main/docs/api.md)
          - [Contributing](https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md)
          
          ### üê≥ Docker Images
          - Backend: `cyber-container-platform/backend:v${{ steps.version.outputs.VERSION }}`
          - Frontend: `cyber-container-platform/frontend:v${{ steps.version.outputs.VERSION }}`
          
          ### üìä Checksums
          See the attached checksums file for verification.
        draft: false
        prerelease: false

  # Build Backend Binary
  build-backend:
    name: üêπ Build Backend Binary
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêπ Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: üîß Install dependencies
      run: |
        cd backend
        go mod download
        go mod verify

    - name: üèóÔ∏è Build binary
      run: |
        cd backend
        CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -ldflags="-s -w" -o cyber-platform-backend .

    - name: üì¶ Upload backend binary
      uses: actions/upload-artifact@v3
      with:
        name: cyber-platform-backend-linux
        path: backend/cyber-platform-backend

  # Build Frontend
  build-frontend:
    name: ‚öõÔ∏è Build Frontend
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: üîß Install dependencies
      run: |
        cd frontend
        npm ci

    - name: üèóÔ∏è Build application
      run: |
        cd frontend
        npm run build

    - name: üì¶ Upload frontend build
      uses: actions/upload-artifact@v3
      with:
        name: cyber-platform-frontend
        path: frontend/.next

  # Build Docker Images
  build-docker:
    name: üê≥ Build Docker Images
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîê Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üè∑Ô∏è Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          cyber-container-platform/backend
          cyber-container-platform/frontend
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üèóÔ∏è Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: üèóÔ∏è Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Create Release Assets
  create-assets:
    name: üì¶ Create Release Assets
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì• Download backend binary
      uses: actions/download-artifact@v3
      with:
        name: cyber-platform-backend-linux
        path: ./artifacts

    - name: üì• Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: cyber-platform-frontend
        path: ./artifacts

    - name: üè∑Ô∏è Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: üì¶ Create release archive
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        
        # Create release directory
        mkdir -p release
        
        # Copy files
        cp -r artifacts/* release/
        cp -r backend/config release/
        cp -r nginx release/
        cp docker-compose.prod.yml release/
        cp deploy.sh release/
        cp README.md release/
        cp LICENSE release/
        
        # Create archive
        tar -czf cyber-container-platform-v${VERSION}.tar.gz -C release .
        
        # Create checksums
        sha256sum cyber-container-platform-v${VERSION}.tar.gz > checksums.txt

    - name: üì§ Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./cyber-container-platform-v${{ steps.version.outputs.VERSION }}.tar.gz
        asset_name: cyber-container-platform-v${{ steps.version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip

    - name: üì§ Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  # Notify Community
  notify-community:
    name: üì¢ Notify Community
    runs-on: ubuntu-latest
    needs: [create-release, build-docker, create-assets]

    steps:
    - name: üì¢ Notify Discord
      run: |
        echo "üöÄ Cyber Container Platform v${{ github.ref_name }} has been released!"
        echo "üì¶ Download: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        echo "üê≥ Docker: cyber-container-platform/backend:${{ github.ref_name }}"
        # Add Discord webhook notification here

    - name: üì¢ Notify Twitter
      run: |
        echo "üöÄ Just released Cyber Container Platform v${{ github.ref_name }}!"
        echo "A modern, self-hosted container management platform with a cyberpunk interface."
        echo "üê≥ Docker ‚Ä¢ ‚öõÔ∏è React ‚Ä¢ üêπ Go ‚Ä¢ üîí Privacy-first"
        # Add Twitter API notification here

  # Update Documentation
  update-docs:
    name: üìö Update Documentation
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üè∑Ô∏è Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: üìù Update version in README
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: $VERSION/g" README.md

    - name: üì§ Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "üìù Update version to v${{ steps.version.outputs.VERSION }}" || exit 0
        git push
